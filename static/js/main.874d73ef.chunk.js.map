{"version":3,"sources":["components/LaunchTool.js","components/Menu.js","utils/copyTextToClipboard.js","components/DeletingIdenticalStrings.js","components/ClearTextFormatting.js","components/CountingTextLength.js","components/OpeningMultipleLinks.js","components/App/index.js","index.js"],"names":["LaunchTool","_ref","toolsList","map","tool","Component","nameComponent","id","title","description","comment","react_default","a","createElement","key","className","ru","Menu","items","href","concat","copyTextToClipboard","text","navigator","clipboard","writeText","status","textArea","document","style","position","top","left","border","padding","width","height","value","body","appendChild","focus","select","execCommand","err","removeChild","fallbackCopyTextToClipboard","DeletingIdenticalStrings","textToProcess","React","createRef","state","countStrings","buttonDisabled","copyInfo","handleChange","_this","setState","handleSubmit","strings","current","split","result","Object","toConsumableArray","Set","join","all","length","handleCopy","copyStatus","setTimeout","render","placeholder","ref","onChange","type","onClick","disabled","ClearTextFormatting","CountingTextLength","count","countParagraphs","paragraphs","forEach","str","trim","target","lengthText","totalCharacters","charactersWithoutSpaces","replace","words","approximatelyPages","Math","ceil","OpeningMultipleLinks","optionsShow","options","separatorUrl","numberOfUrlToOpen","separatorType","enter","comma","space","handleOptions","handleChangeOptions","_ref$target","objectSpread","defineProperty","parseInt","separator","urls","some","element","index","url","window","open","slice","handleClear","userAgent","informer","indexOf","htmlFor","min","max","en","App","components_Menu","components_LaunchTool","ReactDOM","components_App","getElementById"],"mappings":"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","file":"static/js/main.874d73ef.chunk.js","sourcesContent":["import React from 'react';\n\nconst LaunchTool = ({ toolsList }) => {\n  const tools = toolsList.map((tool) => {\n    const { nameComponent: Component, id, title, description, comment } = tool;\n    return (\n      <div key={id}>\n        <p className=\"App-intro\" id={id}>{title.ru}</p>\n        {description && <div>{description.ru}</div>}\n        <Component />\n        {comment && <div>{comment.ru}</div>}\n      </div>\n    );\n  });\n  return (tools);\n};\n\nexport default LaunchTool;\n","import React from 'react';\n\nconst Menu = ({ toolsList }) => {\n  const items = toolsList.map((tool) => {\n    const { id, title } = tool;\n    return (\n      <div className=\"menu-item\" key={id}>\n        <a href={`#${id}`}>{title.ru}</a>\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"menu\">{items}</div>\n  );\n};\n\nexport default Menu;\n","const fallbackCopyTextToClipboard = (text) => {\n  const textArea = document.createElement('textarea');\n  let status;\n\n  // Place in the upper left corner of the screen, regardless of the scroll position\n  textArea.style.position = 'fixed';\n  textArea.style.top = 0;\n  textArea.style.left = 0;\n\n  // Clearing the boundary and setting the minimum size\n  textArea.style.border = 'none';\n  textArea.style.padding = 0;\n  textArea.style.width = '1px';\n  textArea.style.height = '1px';\n\n  textArea.value = text;\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    status = document.execCommand('copy');\n  } catch (err) {\n    status = false;\n  }\n\n  document.body.removeChild(textArea);\n  return status;\n};\n\nconst copyTextToClipboard = (text) => {\n  if (!navigator.clipboard) {\n    return fallbackCopyTextToClipboard(text);\n  }\n  navigator.clipboard.writeText(text);\n  return true;\n};\n\nexport default copyTextToClipboard;\n","import React, { Component } from 'react';\nimport copyTextToClipboard from '../utils/copyTextToClipboard';\n\nclass DeletingIdenticalStrings extends Component {\n  textToProcess = React.createRef();\n  state = {\n    countStrings: {},\n    buttonDisabled: true,\n    copyInfo: '',\n  };\n\n  handleChange = () => {\n    this.state.buttonDisabled && this.setState({ buttonDisabled: false });\n  };\n\n  handleSubmit = () => {\n    const strings = this.textToProcess.current.value.split('\\n');\n    const result = [...new Set(strings)];\n    this.textToProcess.current.value = result.join('\\n');\n\n    this.setState({\n      countStrings: {\n        all: strings.length,\n        result: result.length,\n      },\n      buttonDisabled: true,\n    });\n  };\n\n  handleCopy = () => {\n    const copyStatus = copyTextToClipboard(this.textToProcess.current.value);\n    this.setState({ copyInfo: <span>{copyStatus ? 'Скопировано' : 'Не удалось скопировать'}</span> });\n    setTimeout(() => {\n      this.setState({ copyInfo: '' });\n    }, 10000);\n  };\n\n  render = () => (\n    <form>\n      <div>\n        <textarea\n          className=\"App-textarea\"\n          placeholder=\"Введите текст\"\n          ref={this.textToProcess}\n          onChange={this.handleChange}\n        />\n      </div>\n      <div>\n        <button type=\"button\" onClick={this.handleSubmit} disabled={this.state.buttonDisabled}>Start</button>\n        <button type=\"button\" onClick={this.handleCopy}>Copy text</button>\n        {this.state.copyInfo}\n        {this.state.countStrings.all && (\n          <div>{\n            this.state.countStrings.all === this.state.countStrings.result\n              ? 'Дубликатов строк не найдено'\n              : `Всего строк было: ${this.state.countStrings.all}.\n          Удалено: ${this.state.countStrings.all - this.state.countStrings.result}.\n          Осталось: ${this.state.countStrings.result}`\n          }</div>\n        )}\n      </div>\n    </form>\n  );\n}\n\nexport default DeletingIdenticalStrings;\n","import React, { Component } from 'react';\nimport copyTextToClipboard from '../utils/copyTextToClipboard';\n\nclass ClearTextFormatting extends Component {\n  textToProcess = React.createRef();\n  state = { copyInfo: '' };\n\n  handleCopy = () => {\n    const copyStatus = copyTextToClipboard(this.textToProcess.current.value);\n    this.setState({ copyInfo: <span>{copyStatus ? 'Скопировано' : 'Не удалось скопировать'}</span> });\n    setTimeout(() => {\n      this.setState({ copyInfo: '' });\n    }, 10000);\n  };\n\n  render = () => (\n    <form>\n      <div>\n        <textarea\n          className=\"App-textarea\"\n          ref={this.textToProcess}\n          placeholder=\"Скопируйте сюда текст и затем скопируйте результат\"\n        />\n      </div>\n      <div>\n        <button type=\"button\" onClick={this.handleCopy}>Copy text</button>\n        {this.state.copyInfo}\n      </div>\n    </form>\n  );\n}\n\nexport default ClearTextFormatting;\n","import React, { Component } from 'react';\n\nclass CountingTextLength extends Component {\n  state = { value: '', count: {} };\n\n  countParagraphs = (text) => {\n    let paragraphs = 0;\n    text.split('\\n').forEach((str) => {\n      if (str.trim()) paragraphs += 1;\n    });\n    return paragraphs;\n  };\n\n  handleChange = ({ target: { value } }) => {\n    const lengthText = value.length;\n    this.setState({\n      value,\n      count: {\n        totalCharacters: lengthText,\n        charactersWithoutSpaces: value.replace(/\\s+/g, '').length,\n        words: value.trim().split(/\\s+/).length,\n        paragraphs: this.countParagraphs(value),\n        approximatelyPages: Math.ceil(lengthText / 4250),\n      },\n    });\n  };\n\n  render = () => (\n    <form>\n      <div>\n        <textarea\n          className=\"App-textarea\"\n          placeholder=\"Введите текст\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n      </div>\n      {this.state.value !== '' && (\n        <div>\n          Всего символов: {this.state.count.totalCharacters}<br />\n          Символов без пробелов: {this.state.count.charactersWithoutSpaces}<br />\n          Количество слов: {this.state.count.words}<br />\n          Количество абзацев: {this.state.count.paragraphs}<br />\n          Примерное количество страниц: {this.state.count.approximatelyPages}<br />\n        </div>\n      )}\n    </form>\n  );\n}\n\nexport default CountingTextLength;\n","import React, { Component } from 'react';\n\nclass OpeningMultipleLinks extends Component {\n  textToProcess = React.createRef();\n  state = {\n    buttonDisabled: true,\n    optionsShow: false,\n    options: {\n      separatorUrl: 'enter',\n      numberOfUrlToOpen: '',\n    },\n  };\n  separatorType = {\n    enter: '\\n',\n    comma: ',',\n    space: /\\s+/g,\n  };\n\n  handleChange = () => {\n    // Открываем кнопку запуска если она заблокирована и есть текст\n    this.state.buttonDisabled && !!this.textToProcess.current.value && this.setState({ buttonDisabled: false });\n    // Блокируем кнопку запуска если она не заблокирована и нет текста\n    !this.state.buttonDisabled && !this.textToProcess.current.value && this.setState({ buttonDisabled: true });\n  };\n\n  handleOptions = () => {\n    this.setState({ optionsShow: !this.state.optionsShow });\n  };\n\n  handleChangeOptions = ({ target: { value, id } }) => {\n    this.setState({\n      options: { ...this.state.options, [id]: value },\n      buttonDisabled: !this.textToProcess.current.value,\n    });\n  };\n\n  handleSubmit = () => {\n    const numberOfUrlToOpen = parseInt(this.state.options.numberOfUrlToOpen, 10);\n    let separator = this.separatorType[this.state.options.separatorUrl] || '\\n';\n\n    const urls = this.textToProcess.current.value.split(separator);\n\n    const resultForEach = urls.some((element, index) => {\n      const url = element.trim().replace(/&amp;/g, '&');\n      if (url) window.open(url);\n\n      return index === (numberOfUrlToOpen - 1);\n    });\n\n    if (resultForEach && urls.length !== numberOfUrlToOpen) {\n      if (this.state.options.separatorUrl === 'space') separator = ' ';\n      this.textToProcess.current.value = urls.slice(numberOfUrlToOpen).join(separator);\n    } else {\n      this.setState({ buttonDisabled: true });\n      if (numberOfUrlToOpen) {\n        this.textToProcess.current.value = '';\n      }\n    }\n  };\n\n  handleClear = () => {\n    this.textToProcess.current.value = '';\n    this.setState({ buttonDisabled: true });\n  };\n\n  render = () => {\n    const userAgent = navigator.userAgent;\n    const informer = userAgent && userAgent.indexOf('Chrome') !== -1;\n\n    return (\n      <form>\n        <div>\n          <textarea\n            className=\"App-textarea\"\n            placeholder=\"Введите ссылки, по одному в строке\"\n            ref={this.textToProcess}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div>\n          <button\n            type=\"button\"\n            onClick={this.handleOptions}\n          >{this.state.optionsShow ? 'Скрыть' : 'Показать'} опции</button>\n          {this.state.optionsShow && (\n            <div>\n              <div>\n                <label htmlFor=\"separatorUrl\">Разделитель между URL: </label>\n                <select id=\"separatorUrl\" value={this.state.options.separatorUrl} onChange={this.handleChangeOptions}>\n                  <option value=\"enter\">Enter</option>\n                  <option value=\"space\">Space</option>\n                  <option value=\"comma\">Comma</option>\n                </select>\n              </div>\n              <div>\n                <label htmlFor=\"numberOfUrlToOpen\">Открывать по </label>\n                <input\n                  type=\"number\"\n                  id=\"numberOfUrlToOpen\"\n                  placeholder=\"15\"\n                  style={{ width: 40 }}\n                  min=\"1\"\n                  max=\"999\"\n                  value={this.state.options.numberOfUrlToOpen}\n                  onChange={this.handleChangeOptions}\n                />\n                {' '}URLs (открытые URL будут удалены из списка)\n              </div>\n            </div>\n          )}\n        </div>\n        <div>\n          <button type=\"button\" onClick={this.handleSubmit} disabled={this.state.buttonDisabled}>Open all URLs</button>\n          <button type=\"button\" onClick={this.handleClear}>Clear</button>\n        </div>\n        {informer && (\n          <div>\n            По умолчанию всплывающие окна блокируются браузером.\n            Разрешите показывать всплывающие окна на этом сайте, чтобы открытие URL-адресов работало корректно.\n            {' '}<a href=\"/static/images/help-opening-multiple-links.png\" target=\"_blank\">Нажмите здесь</a> чтобы узнать как это сделать.\n          </div>\n        )}\n      </form>\n    );\n  };\n}\n\nexport default OpeningMultipleLinks;\n","import React, { Component } from 'react';\nimport LaunchTool from '../LaunchTool';\nimport Menu from '../Menu';\nimport DeletingIdenticalStrings from '../DeletingIdenticalStrings';\nimport ClearTextFormatting from '../ClearTextFormatting';\nimport CountingTextLength from '../CountingTextLength';\nimport OpeningMultipleLinks from '../OpeningMultipleLinks';\nimport './App.css';\n\nconst toolsList = [\n  {\n    id: 'DeletingIdenticalStrings',\n    nameComponent: DeletingIdenticalStrings,\n    title: {\n      ru: 'Удаление одинаковых строк',\n      en: 'Deleting identical lines',\n    },\n  },\n  {\n    id: 'ClearTextFormatting',\n    nameComponent: ClearTextFormatting,\n    title: {\n      ru: 'Очистка текста от форматирования',\n      en: 'Clear text formatting',\n    },\n    description: {\n      ru: 'Форма позволяет очистить скопированный текст (с web-страниц или с текстовых редакторов) от форматирования текста, такого как: жирность, курсив, разные размеры шрифта, ссылки, изображения и пр.',\n      en: 'The form allows you to clear copied text (from web pages or text editors) from text formatting, such as: bold, italics, different font sizes, links, images, etc.',\n    },\n    comment: null,\n  },\n  {\n    id: 'CountingTextLength',\n    nameComponent: CountingTextLength,\n    title: {\n      ru: 'Подсчет длины текста',\n      en: 'Counting text length',\n    },\n  },\n  {\n    id: 'OpeningMultipleLinks',\n    nameComponent: OpeningMultipleLinks,\n    title: {\n      ru: 'Открытие нескольких URL-адресов',\n      en: 'Opening multiple URLs',\n    },\n    description: {\n      ru: 'Этот инструмент одновременно открывает несколько ссылок в отдельных вкладках.',\n      en: 'This tool simultaneously opens several links in separate tabs.',\n    },\n  },\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Online-tools</h1>\n        </header>\n        <Menu toolsList={toolsList} />\n        <LaunchTool toolsList={toolsList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import registerServiceWorker from './utils/registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}